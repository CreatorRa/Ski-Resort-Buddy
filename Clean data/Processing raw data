using DataFrames
using CSV
using Dates

"""
    process_country_data(filepath, country_name, region_replacements)

Loads, cleans, and transforms a country's monthly ski data from a given CSV file.
This function handles dropping unnecessary columns, removing missing values,
renaming columns for clarity, adding a country identifier, and cleaning region names.

# Arguments
- `filepath::String`: The full path to the input CSV file.
- `country_name::String`: The name of the country to add to the 'Country' column.
- `region_replacements::Vector{Pair{String, String}}`: A list of text replacements to apply to the region names.

# Returns
- `DataFrame`: A cleaned and processed DataFrame for the specified country.
"""
function process_country_data(filepath::String, country_name::String, region_replacements::Vector{Pair{String, String}})
    df = CSV.read(filepath, DataFrame)

    columns_to_drop = [
        "SCD1gt", "SCD10", "SCD20", "SCD30", "SCD50", "SCD100",
        "HSmean_gapfill", "frac_gapfilled", "HSmax_gapfill", "SCD1_gapfill",
        "SCD1gt_gapfill", "SCD10_gapfill", "SCD20_gapfill", "SCD30_gapfill",
        "SCD50_gapfill", "SCD100_gapfill"
    ]
    select!(df, Not(columns_to_drop))

    dropmissing!(df, :HNsum)

    rename!(df,
        "Name" => "Region",
        "HNsum" => "Snow Depth (cm)",
        "HSmean" => "Mean Snow Depth (cm)",
        "HSmax" => "Max Snow Depth (cm)",
        "SCD1" => "Days where AVG Temp < 0C",
        "year" => "Date"
    )

    insertcols!(df, 2, :Country => country_name)

    for replacement in region_replacements
        df.Region = replace.(df.Region, replacement)
    end

    return df
end

# -- Swiss Data processing --
swiss_replacements = [
    "_CH_SLF" => "",
    "Davos_Fluelastr_" => "Davos",
    "St_Moritz" => "St Moritz"
]
df_ch = process_country_data("c:\\Users\\Carter\\OneDrive\\Documents\\KLU\\KLU Studies\\Scientific Programming\\Clean Data\\more data\\data_monthly_CH_SLF.csv", "Switzerland", swiss_replacements)

# -- Germany Data processing --
german_replacements = [
    "Berchtesgaden_KKst_" => "Berchtesgaden",
    "Feldberg_Schwarzwald" => "Feldberg",
    "Garmisch_Partenkirchen" => "Garmisch-Partenkirchen",
    "Oberndorf_Neckar" => "Oberstdorf"
]
df_de = process_country_data("C:\\Users\\Carter\\OneDrive\\Documents\\KLU\\KLU Studies\\Scientific Programming\\Clean Data\\more data\\data_monthly_DE_DWD.csv", "Germany", german_replacements)

# -- Austria Data Processing ---
df_at = process_country_data("C:\\Users\\Carter\\OneDrive\\Documents\\KLU\\KLU Studies\\Scientific Programming\\Clean Data\\more data\\data_monthly_AT_HZB.csv", "Austria", Pair{String, String}[])

# Combines the dataframes into a single data frame.
df_combined = vcat(df_ch, df_de, df_at)
filter!(:Date => >=(2015), df_combined) # This filters the data to only include data from the year 2015 onwards.
rename!(df_combined, "Date" => "Year")
rename!(df_combined, "month" => "Month")
rename!(df_combined, "Snow Depth (cm)" => "Monthly Snow Depth (cm)")
insertcols!(df_combined, 5, :Day => missing)
insertcols!(df_combined, 6, :"Elevation (m)" => missing)
insertcols!(df_combined, 7, :"Wind (Beaufort)" => missing)
insertcols!(df_combined, 8, :"Temperature (Â°C)" => missing)
insertcols!(df_combined, 9, :"Precipitation (mm)" => missing)
insertcols!(df_combined, 10, :"Daily Snow Depth (cm)" => missing)

# --- Process regions data ---
filepath_regions = "c:\\Users\\Carter\\OneDrive\\Documents\\KLU\\KLU Studies\\Scientific Programming\\Clean Data\\more data\\ski-regions-data.csv"
df_regions = CSV.read(filepath_regions, DataFrame)
df_regions.Date = Date.(df_regions.Date)
df_regions.Year = year.(df_regions.Date)
df_regions.Month = month.(df_regions.Date)
df_regions.Day = day.(df_regions.Date)

select!(df_regions, Not(:Date))
rename!(df_regions, "Snow Depth (cm)" => "Daily Snow Depth (cm)")

sort!(df_regions, :Region)
all_cols = names(df_regions)
date_cols_to_move = ["Year", "Month", "Day"]
other_cols = setdiff(all_cols, date_cols_to_move)
country_index = findfirst(isequal("Country"), other_cols)
new_order = vcat(
    other_cols[1:country_index],      # Columns up to and including 'Country'
    date_cols_to_move,                # Insert the date columns here
    other_cols[country_index+1:end]   # Add the rest of the columns
)
select!(df_regions, new_order)
insertcols!(df_regions, 11, :"Mean Snow Depth (cm)" => missing)
insertcols!(df_regions, 12, :"Monthly Snow Depth (cm)" => missing)
insertcols!(df_regions, 13, :"Max Snow Depth (cm)" => missing)
insertcols!(df_regions, 14, :"Days where AVG Temp < 0C" => missing)

# --- Append the two dataframes ---
final_col_order = names(df_combined)
df_regions_aligned = select(df_regions, final_col_order, :) # Reorder columns to match df_combined
df_appended = vcat(df_combined, df_regions_aligned)

# --- Coalesce snow depth columns into a single column ---
df_appended."Snow Depth (cm)" = coalesce.(df_appended."Monthly Snow Depth (cm)", df_appended."Daily Snow Depth (cm)")

# --- Reorder columns to place "Snow Depth (cm)" in the 9th position ---
current_cols = names(df_appended)
# Remove "Snow Depth (cm)" from its current position
filter!(!isequal("Snow Depth (cm)"), current_cols)
# Insert "Snow Depth (cm)" at the 9th position (index 9)
insert!(current_cols, 9, "Snow Depth (cm)")
# Apply the new order to the DataFrame
select!(df_appended, current_cols)

# --- Populate missing Day values with random valid days ---
df_appended.Day = map(eachrow(df_appended)) do row
    if ismissing(row.Day)
        if row.Month == 2
            return rand(1:28) # February
        else
            return rand(1:30) # Other months (simplified)
        end
    end
    return row.Day # Keep existing day if not missing
end

# --- Combine Year, Month, and Day into a single Date column ---
df_appended.Date = Date.(df_appended.Year, df_appended.Month, df_appended.Day)
select!(df_appended, Not([:Year, :Month, :Day]))

# --- Reorder columns to place "Date" in the 3rdth position ---
current_cols = names(df_appended)
# Remove "Date" from its current position
filter!(!isequal("Date"), current_cols)
# Insert "Date" at the 9th position (index 9)
insert!(current_cols, 3, "Date")
# Apply the new order to the DataFrame
select!(df_appended, current_cols)

first(df_appended, 5)

# --- Export the final appended DataFrame to a new CSV file ---
#output_filepath_final = "c:\\Users\\Carter\\OneDrive\\Documents\\KLU\\KLU Studies\\Scientific Programming\\Clean Data\\more data\\DACH SKi Resort data coalesce.csv"
#CSV.write(output_filepath_final, df_appended)
