# Ski-Resort-Buddy Project Documentation

## 1. Overview

Ski-Resort-Buddy is a command-line interface (CLI) application written in Julia. It helps users find the best ski resort based on their preferences. The application ranks alpine resorts by weather, snow quality, and user-defined priorities. It features an interactive menu that guides the user through the process of selecting a resort. The application automatically downloads the latest dataset from a remote source and caches it locally.

## 2. Features

- **Interactive Menu**: A user-friendly menu to guide users through the process.
- **Remote Dataset**: Automatically fetches and caches the latest ski resort data.
- **Yearly Snowfall Leaderboard**: Ranks regions by total fresh snow in the last 12 months.
- **Region Deep Dive**: Provides detailed historical data and optional plots for selected regions.
- **Custom Weights**: Allows users to customize the importance of different metrics (fresh snow, snow depth, temperature, precipitation, and wind).
- **Non-interactive Mode**: Supports scripting and automation through command-line arguments.
- **Localization**: Supports multiple languages.

## 3. Project Structure

The project is organized into the following directories:

- **`bin`**: Contains the main executable script `dach_resort_advisor`.
- **`src`**: Contains the Julia source code, organized into modules.
- **`data`**: Contains the ski resort data.
- **`plots`**: Stores generated plots.
- **`test`**: Contains tests for the application.
- **`Clean data`**: Contains scripts for cleaning and processing raw data.

### 3.1. `src` Directory

The `src` directory contains the core logic of the application, divided into the following files:

- **`SkiLookup.jl`**: The main module that initializes the application and includes other modules.
- **`command_line_interface.jl`**: Handles parsing of command-line arguments and environment variables.
- **`interactive_menu.jl`**: Implements the interactive user menu.
- **`language_support.jl`**: Manages multi-language support.
- **`reporting.jl`**: Generates reports, tables, and plots.
- **`transforms.jl`**: Handles data loading, cleaning, and transformation.
- **`utils.jl`**: Provides utility functions for strings, numbers, and user input.
- **`weights.jl`**: Manages the weighting of different metrics.

The `src` directory also contains subdirectories for each of the main modules, which break down the logic into smaller, more manageable files:

- **`reporting_components`**: Contains modules for different aspects of reporting, such as monthly overviews, region details, and plotting.
- **`transforms_components`**: Contains modules for data path resolution, dataset enrichment, and series processing.
- **`utils_components`**: Contains modules for dataset lookup, speech and input utilities, and string and numeric utilities.

## 4. How it Works

### 4.1. Entry Point

The application starts from the `bin/dach_resort_advisor` script. This script sets up the Julia environment and calls the `main()` function in the `SkiLookup` module.

### 4.2. Initialization

The `SkiLookup.main()` function in `command_line_interface.jl` performs the following steps:

1.  **Parses CLI arguments**: It parses command-line arguments and environment variables to configure the application.
2.  **Loads data**: It loads the ski resort data from a remote CSV file (and caches it locally).
3LAG. **Applies filters**: It filters the data based on user-defined criteria (e.g., season, date range).
4.  **Initializes weights**: It initializes the metric weights with default values or user-defined values.
5.  **Dispatches command**: It dispatches to the appropriate function based on the user's command (`report`, `menu`, `list`, or `region`).

### 4.3. Interactive Menu

If the user runs the `menu` command, the `run_menu()` function in `interactive_menu.jl` is called. This function displays a menu with the following options:

-   **Overall Summary**: Displays a report for all regions.
-   **Select Country**: Allows the user to filter by country.
-   **Exit**: Exits the application.

### 4.4. Reporting

The `reporting.jl` module and its components are responsible for generating all the reports and visualizations. The `run_report()` function in `reporting_workflow.jl` is the main entry point for generating a report. It performs the following steps:

1.  **Prints active filters and weights**: It displays the current filters and weights being used.
2.  **Prints daily scoreboard**: It shows the regions with the most new snow in the last year.
3.  **Prints monthly overview**: It displays a table with the average metrics for the latest month.
4.  **Prints weighted ranking**: It ranks the regions based on the weighted score.
5.  **Prompts for region details**: It allows the user to select a region for a more detailed analysis.

### 4.5. Data Transformation

The `transforms.jl` module and its components are responsible for loading and transforming the data. The `load_data()` function in `dataset_enrichment.jl` is the main entry point for loading the data. It performs the following steps:

1.  **Resolves CSV path**: It determines the path to the CSV file to load.
2.  **Ensures local CSV**: It downloads the CSV file if it's a remote URL and not already cached.
3.  **Reads CSV**: It reads the CSV file into a DataFrame.
4.  **Normalizes columns**: It renames the columns to a consistent format.
5.  **Cleans and transforms data**: It cleans the data, handles missing values, and adds a `Snow_New (cm)` column.

## 5. How to Use

### 5.1. Getting Started

1.  **Install dependencies**:
    ```bash
    julia --project=. -e '''import Pkg; Pkg.instantiate()'''
    ```
2.  **Launch the menu**:
    ```bash
    julia --project=. bin/dach_resort_advisor menu
    ```

### 5.2. Non-interactive Usage

-   **Run a full report**:
    ```bash
    julia --project=. bin/dach_resort_advisor report
    ```
-   **List all available regions**:
    ```bash
    julia --project=. bin/dach_resort_advisor list
    ```
-   **Get a summary for a specific region**:
    ```bash
    julia --project=. bin/dach_resort_advisor region "Zermatt"
    ```

## 6. Testing

To run the tests, execute the following command from the project directory:

```bash
julia --project=. test/runtests.jl
```